package com.learning.scala.functional

/*
 * Scala: введение в функциональное программирование
 *
 * Сложности функционального программирования:
 * (#1) Функции выполняют операции со значениями, как и в процедурных языках, но вместо того, чтобы изменять их входы, функции рассматриваются как действующие как математические функции и возвращать новые значения.
 *      Короче говоря, функции рассматриваются как мало машин для обработки, которые принимают в значениях и выходных новых значений.
 *
 * (#2) Первоклассные функции - ключевое понятие функционального программирования, что функции должны быть значения, которые могут быть введены в переменные.
 *      Это означает, что функции могут быть введены в переменные, передаваемые методам, и манипулировать таким же образом, как любое другое значение.
 */


object IntroToFunctional extends App {
  /*
   * Scala поддерживает функции как значения первого класса. Это означает, что язык позволяет писать функции таким образом, который может быть введен в 'var(ы)' или 'val(ы)' и рассматриваться как любое другое значение. Они называются функциональные литералы (или анонимные функции).
   * '=>' - (ключевая часть синтаксиса) используется в Scala-выражениях принятия параметров в списке и передачи их в блок кода:
   *      (<list of function parameters>) => { ... function body as a block ... }
   * Пример №1 - функция принимает одно значение, обрабатывает его и возвращает другое значение:
   */
   val doubler = (x : Int) => { 2 * x }
   println("Double of 2 is: " + doubler(2))
   println("Double of 4 is: " + doubler(4))


   /*
    * Пример №2 - определение функционального литерала - функция формирующая функцию..:
    * ( функциональный литерал принимает одно значение и возвращает другую функцию в качестве значения )
    */
   val adder = (n : Int) => { (x : Int) => n + x }
   
   val plus2 = adder(2)
   println("2 + 5 = " + plus2(5))
   println("2 + 8 = " + plus2(8))
   
   val plus3 = adder(3)
   println("3 + 5 = " + plus3(5))
   println("3 + 8 = " + plus3(8))
   
   val plus5 = adder(5)
   println("5 + 5 = " + plus5(5))
   println("5 + 8 = " + plus5(8))
}
