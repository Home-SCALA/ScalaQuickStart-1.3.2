package com.learning.scala.features

/*
 * Scala: как Scala позволяет писать выразительный код фальсифицируя конструкцию языка с использованием правила фигурной скобкой и функций высшего порядка..
 */


object HigherOrderFunctions extends App {  

    /*
     * (#1) В Scala как правило, вместо регулярных '{}', используются фигурные скобки '()'
     *      При каждом вызове метода, в котором вы проходите ровно один аргумент, вы можете использовать фигурные скобки, чтобы выделить этот аргумент (вместо круглых скобок)..
     */
    val quarters = List("Q1", "Q2", "Q3", "Q4")

    println("##############")
    quarters.foreach( println(_) ) /* ( здесь 'foreach' является методом который имеет один аргумент ) */

    /* Ниже вы можете написать тоже самое как показано выше, только используя правило фигурной скобки: */
    println("\n##############")
    quarters.foreach { /* ( теперь это выглядит как для встроенной loop-конструкции, и даже если это используется внутри метода ) */
      println(_) 
    }

    /*
     * (#2) Функция первого порядка по сравнению с функциями высшего порядка..
     *      Определим функцию первого порядка по сравнению с функциями высшего порядка:
     *
     * Функции первого порядка - такие функции принимают некоторые типы в качестве параметров и возвращают некоторый тип в качестве результата.
     * Пример функции первого порядка, который принимает два целочисленных значения и возвращает значение:
     */
    def sumOfSquares(a: Int, b: Int): Int = {
     a * a + b * b
    }
    
    def sumOfCubes(a: Int, b: Int): Int = {
     a * a * a + b * b * b
    }

    /*
     * Функции высшего порядка - такие функции, которые принимают другие функции в качестве параметров, или чей результат является функцией.
     * Перепишем код изложеный выше, чтобы использовать функцию высшего порядка, которая принимая три параметра:
     * 1) функция которая принимает 'Int' и возвращает 'Int';
     * 2) как 'Int';
     * 3) по имени 'Ь: Int';
     */
    def sumOfTwoOperations(function: Int => Int, a: Int, b: Int): Int = {
     function(a) + function(b) /* сокращенная для этого синтаксиса: >  function.apply(a) + function.apply(b) */
    }

    /*
     * Вызов функции первого порядка по сравнению с функциями высшего порядка
     * Вызов 'sumOfSquares' и 'sumOfCubes' для функции первого порядка:
     */
    println("\n##############")
    println { sumOfSquares(2,3) }
    println("\n##############")
    println { sumOfCubes(2,3) }

    /* Вызов 'sumOfTwoOperations' для функции высшего порядка, передав в качестве первого параметра функцию ('squared'): */
    def squared(x: Int): Int = x * x
    println("\n##############")
    println { sumOfTwoOperations(squared, 2, 3) }

    /* Вызов 'sumOfTwoOperations' для функции высшего порядка, передав в качестве первого параметра функцию ('cubed'): */
    def cubed(x: Int): Int = x * x * x
    println("\n##############")
    println { sumOfTwoOperations(cubed, 2, 3) }
}
